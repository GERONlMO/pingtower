package com.pingtower.control_tower.controller;

import com.pingtower.control_tower.domain.Service;
import com.pingtower.control_tower.model.dto.ServiceCreateRequest;
import com.pingtower.control_tower.repository.ServiceRepository;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/services")
@Tag(name = "Services", description = "Service management endpoints")
public class ServiceController {

    @Autowired
    private ServiceRepository serviceRepository;

    @GetMapping
    @Operation(
            summary = "üè¢ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã",
            description = """
                    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∏—Ö —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏.
                    
                    **–ß—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è:**
                    - –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ (ID, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–∫—Ä—É–∂–µ–Ω–∏–µ)
                    - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (OK, CRIT, UNKNOWN)
                    - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
                    - –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    
                    **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
                    –≠—Ç–æ—Ç endpoint –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è 
                    –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
                    """
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200", 
                    description = "‚úÖ –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(
                                    implementation = Service.class,
                                    example = "[{\"id\":\"google\",\"name\":\"Google Search\",\"environment\":\"production\",\"status\":1,\"lastStatusText\":\"OK\",\"lastCheck\":\"2024-01-15T10:30:00Z\"}]"
                            )
                    )
            ),
            @ApiResponse(
                    responseCode = "500", 
                    description = "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            )
    })
    public List<Service> getAllServices() {
        return serviceRepository.findAll();
    }

    @GetMapping("/{id}")
    @Operation(summary = "Get service by ID", description = "Retrieve a specific service by its ID")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Service found",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Service.class))),
            @ApiResponse(responseCode = "404", description = "Service not found")
    })
    public ResponseEntity<Service> getServiceById(
            @Parameter(description = "Service ID", required = true)
            @PathVariable String id) {
        Optional<Service> service = serviceRepository.findById(id);
        return service.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    @Operation(
            summary = "üè¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å",
            description = """  
                    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ PingTower.
                    
                    **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:**
                    - `id` - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞ (—Å—Ç—Ä–æ–∫–∞)
                    - `name` - —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
                    - `url` - URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    - `environment` - –æ–∫—Ä—É–∂–µ–Ω–∏–µ (prod, stage, dev, test)
                    - `projectId` - UUID –ø—Ä–æ–µ–∫—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å–µ—Ä–≤–∏—Å
                    
                    **–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):**
                    - `intervalSec` - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60)
                    - `timeoutSec` - —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)
                    - `degradationThresholdMs` - –ø–æ—Ä–æ–≥ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2000)
                    - `enabled` - –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: true)
                    
                    **–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:**
                    1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ `/api/checks`
                    2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    3. –°–µ—Ä–≤–∏—Å –ø–æ—è–≤–∏—Ç—Å—è –≤ –¥–∞—à–±–æ—Ä–¥–µ
                    
                    **–ü—Ä–∏–º–µ—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏–π:**
                    - `production` - –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
                    - `staging` - —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
                    - `development` - –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                    - `search`, `social`, `banking` - —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    """
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200", 
                    description = "‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(
                                    implementation = Service.class,
                                    example = "{\"id\":\"my-api\",\"name\":\"My API Service\",\"url\":\"https://api.example.com\",\"environment\":\"production\",\"projectId\":\"a1a1a1a1-b2b2-c3c3-d4d4-e5e5e5e5e5e5\",\"intervalSec\":60,\"timeoutSec\":5,\"degradationThresholdMs\":2000,\"enabled\":true}"
                            )
                    )
            ),
            @ApiResponse(
                    responseCode = "400", 
                    description = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"
            ),
            @ApiResponse(
                    responseCode = "409", 
                    description = "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
    })
    public Service createService(
            @Parameter(
                    description = "**–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞**\n\n–û–±—ä–µ–∫—Ç —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞", 
                    required = true,
                    example = "{\"id\":\"my-service\",\"name\":\"My Web Service\",\"url\":\"https://www.example.com\",\"environment\":\"production\",\"projectId\":\"a1a1a1a1-b2b2-c3c3-d4d4-e5e5e5e5e5e5\",\"intervalSec\":60,\"timeoutSec\":5,\"degradationThresholdMs\":2000,\"enabled\":true}"
            )
            @RequestBody ServiceCreateRequest request) {
        Service service = new Service();
        service.setId(request.getId());
        service.setName(request.getName());
        service.setUrl(request.getUrl());
        service.setEnvironment(request.getEnvironment());
        service.setProjectId(request.getProjectId());
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        service.setIntervalSec(request.getIntervalSec() != null ? request.getIntervalSec() : 60);
        service.setTimeoutSec(request.getTimeoutSec() != null ? request.getTimeoutSec() : 5);
        service.setDegradationThresholdMs(request.getDegradationThresholdMs() != null ? request.getDegradationThresholdMs() : 2000);
        service.setEnabled(request.getEnabled() != null ? request.getEnabled() : true);
        
        return serviceRepository.save(service);
    }

    @PutMapping("/{id}")
    @Operation(
            summary = "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å",
            description = """
                    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
                    
                    **–û–±–Ω–æ–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è:**
                    - `name` - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
                    - `url` - URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    - `environment` - –æ–∫—Ä—É–∂–µ–Ω–∏–µ
                    - `intervalSec` - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    - `timeoutSec` - —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    - `degradationThresholdMs` - –ø–æ—Ä–æ–≥ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                    - `enabled` - –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    
                    **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ü–æ–ª—è `id` –∏ `projectId` –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è.
                    """
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Service.class))),
            @ApiResponse(responseCode = "404", description = "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    })
    public ResponseEntity<Service> updateService(
            @Parameter(description = "ID —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", required = true)
            @PathVariable String id,
            @Parameter(description = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–∞", required = true)
            @RequestBody ServiceCreateRequest request) {
        return serviceRepository.findById(id)
                .map(service -> {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                    service.setName(request.getName());
                    service.setUrl(request.getUrl());
                    service.setEnvironment(request.getEnvironment());
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
                    if (request.getIntervalSec() != null) {
                        service.setIntervalSec(request.getIntervalSec());
                    }
                    if (request.getTimeoutSec() != null) {
                        service.setTimeoutSec(request.getTimeoutSec());
                    }
                    if (request.getDegradationThresholdMs() != null) {
                        service.setDegradationThresholdMs(request.getDegradationThresholdMs());
                    }
                    if (request.getEnabled() != null) {
                        service.setEnabled(request.getEnabled());
                    }
                    
                    Service updatedService = serviceRepository.save(service);
                    return ResponseEntity.ok(updatedService);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "Delete service", description = "Delete a service and all its checks")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Service deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Service not found")
    })
    public ResponseEntity<Void> deleteService(
            @Parameter(description = "Service ID", required = true)
            @PathVariable String id) {
        return serviceRepository.findById(id)
                .map(service -> {
                    serviceRepository.delete(service);
                    return ResponseEntity.ok().<Void>build();
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }
}
